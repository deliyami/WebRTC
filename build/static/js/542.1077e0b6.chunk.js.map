{"version":3,"file":"static/js/542.1077e0b6.chunk.js","mappings":"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","sources":["pages/video_test.tsx"],"sourcesContent":["import React, { createElement, lazy, useEffect, useRef, useState } from 'react'\n\nimport * as Kalidokit from 'kalidokit'\nimport { remap, clamp } from 'kalidokit/dist/utils/helpers';\nimport '@mediapipe/holistic/holistic'\nimport '@mediapipe/camera_utils/camera_utils'\nimport { drawConnectors } from \"@mediapipe/drawing_utils\";\n// import { Holistic, Results, ResultsListener } from '@mediapipe/holistic'\nimport { Camera } from '@mediapipe/camera_utils'\nimport { ExtendedCamera } from '../interfaces/extendedCamera'\n// import THREE from 'three'\nimport { \n  Clock,\n  DirectionalLight,\n  Euler,\n  PerspectiveCamera,\n  Scene,\n  Quaternion,\n  WebGLRenderer,\n  Vector3\n} from 'three'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { lerp } from 'three/src/math/MathUtils';\nimport { VRM, VRMSchema, VRMUtils } from '@pixiv/three-vrm';\nconst Canvas = lazy(() => import('../components/canvas'))\n\nconst VideoTest = () => {\n\n  const myVideoRef = useRef<HTMLVideoElement>(document.createElement('video'))\n  const myCanvasRef = useRef<HTMLCanvasElement>(null)\n  const scene = useRef<Scene>(new Scene())\n  const currentVrm = useRef<VRM>()\n  const oldLookTarget = useRef<THREE.Euler>(new Euler())\n  const streamRef = useRef<MediaStream>()\n  // @ts-ignore\n  const holisticRef = useRef<Holistic>()\n\n  const [ value, setValue ] = useState(0)\n\n  // load model\n  const threeSetup = async () => {\n    // renderer\n    const renderer = new WebGLRenderer({\n      canvas: myCanvasRef.current!,\n      alpha:true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    // camera\n    const orbitCamera = new PerspectiveCamera(35, 300 / 225, 0.1, 1000);\n    orbitCamera.position.set(-0.1, 1.4, 0.7);\n\n    // controls\n    const orbitControls = new OrbitControls(orbitCamera, renderer.domElement);\n    orbitControls.screenSpacePanning = true;\n    orbitControls.target.set(-0.1, 1.4, 0.0);\n    orbitControls.update();\n\n    // light\n    const light = new DirectionalLight(0xffffff);\n    light.position.set(1.0, 1.0, 1.0).normalize();\n    scene.current.add(light);\n\n    // Main Render Loop\n    const clock = new Clock();\n\n    async function animate() {\n      if (holisticRef.current)\n        await holisticRef.current.send({image: myVideoRef.current});\n      if (currentVrm.current) {\n        // Update model to render physics\n        currentVrm.current.update(clock.getDelta());\n      }\n      renderer.render(scene.current, orbitCamera);\n      requestAnimationFrame(animate);\n    }\n    await animate();\n  }\n  const modelLoad = async () => {\n    const loader = new GLTFLoader();\n    loader.crossOrigin = \"anonymous\";\n    // Import model from URL, add your own model here\n    await loader.load(\n      \"https://cdn.glitch.com/29e07830-2317-4b15-a044-135e73c7f840%2FAshtra.vrm?v=1630342336981\",\n      async gltf => {\n        await VRMUtils.removeUnnecessaryJoints(gltf.scene);\n        await VRM.from(gltf).then(vrm => {\n          scene.current.add(vrm.scene);\n          currentVrm.current = vrm;\n          currentVrm.current.scene.rotation.y = Math.PI; // Rotate model 180deg to face camera\n        });\n      },\n\n      progress =>\n        console.log(\n          \"Loading model...\",\n          100.0 * (progress.loaded / progress.total),\n          \"%\"\n        ),\n\n      error => console.error(error)\n    );\n  }\n  // rigid control == animate\n  const rigRotation = (\n    name: keyof typeof VRMSchema.HumanoidBoneName,\n    rotation = { x: 0, y: 0, z: 0 },\n    dampener = 1,\n    lerpAmount = 0.3\n  ) => {\n    if (!currentVrm.current) return\n    const Part = currentVrm.current.humanoid?.getBoneNode(\n      VRMSchema.HumanoidBoneName[name]\n    );\n    if (!Part) {return}\n    \n    let euler = new Euler(\n      rotation.x * dampener,\n      rotation.y * dampener,\n      rotation.z * dampener\n    );\n    let quaternion = new Quaternion().setFromEuler(euler);\n    Part.quaternion.slerp(quaternion, lerpAmount); // interpolate\n  };\n  \n  const rigPosition = (\n    name: keyof typeof VRMSchema.HumanoidBoneName,\n    position = { x: 0, y: 0, z: 0 },\n    dampener = 1,\n    lerpAmount = 0.3\n  ) => {\n    if (!currentVrm.current) return\n    const Part = currentVrm.current.humanoid?.getBoneNode(\n      VRMSchema.HumanoidBoneName[name]\n    );\n    if (!Part) {return}\n    let vector = new Vector3(\n      position.x * dampener,\n      position.y * dampener,\n      position.z * dampener\n    );\n    Part.position.lerp(vector, lerpAmount); // interpolate\n  };\n  const rigFace = (riggedFace:any) => {\n    if(!currentVrm.current) return\n    rigRotation(\"Neck\", riggedFace.head, 0.7);\n\n    // Blendshapes and Preset Name Schema\n    const Blendshape = currentVrm.current.blendShapeProxy;\n    const PresetName = VRMSchema.BlendShapePresetName;\n    if (!Blendshape || !PresetName) return\n\n    // Simple example without winking. Interpolate based on old blendshape, then stabilize blink with `Kalidokit` helper function.\n    // for VRM, 1 is closed, 0 is open.\n    riggedFace.eye.l = lerp(clamp(1 - riggedFace.eye.l, 0, 1),Blendshape.getValue(PresetName.Blink) ?? 0, .5)\n    riggedFace.eye.r = lerp(clamp(1 - riggedFace.eye.r, 0, 1),Blendshape.getValue(PresetName.Blink) ?? 0, .5)\n    riggedFace.eye = Kalidokit.Face.stabilizeBlink(riggedFace.eye,riggedFace.head.y)\n    Blendshape.setValue(PresetName.Blink, riggedFace.eye.l);\n    \n    // Interpolate and set mouth blendshapes\n    Blendshape.setValue(PresetName.I, lerp(riggedFace.mouth.shape.I,Blendshape.getValue(PresetName.I) ?? 0, .5));\n    Blendshape.setValue(PresetName.A, lerp(riggedFace.mouth.shape.A,Blendshape.getValue(PresetName.A) ?? 0, .5));\n    Blendshape.setValue(PresetName.E, lerp(riggedFace.mouth.shape.E,Blendshape.getValue(PresetName.E) ?? 0, .5));\n    Blendshape.setValue(PresetName.O, lerp(riggedFace.mouth.shape.O,Blendshape.getValue(PresetName.O) ?? 0, .5));\n    Blendshape.setValue(PresetName.U, lerp(riggedFace.mouth.shape.U,Blendshape.getValue(PresetName.U) ?? 0, .5));\n\n    //PUPILS\n    //interpolate pupil and keep a copy of the value\n    let lookTarget =\n      new Euler(\n        lerp(oldLookTarget.current.x, riggedFace.pupil.y, .4),\n        lerp(oldLookTarget.current.y, riggedFace.pupil.x, .4),\n        0,\n        \"XYZ\"\n      )\n    oldLookTarget.current.copy(lookTarget)\n    currentVrm.current.lookAt?.applyer?.lookAt(lookTarget);\n  }\n  // @ts-ignore\n  const onResults: ResultsListener = (results: Results) => {\n    if (!(myCanvasRef.current && myVideoRef.current && currentVrm.current)) return\n\n    // Take the results from `Holistic` and animate character based on its Face, Pose, and Hand Keypoints.\n    let riggedPose, riggedLeftHand, riggedRightHand, riggedFace;\n  \n    const faceLandmarks = results.faceLandmarks;\n    // Pose 3D Landmarks are with respect to Hip distance in meters\n    const pose3DLandmarks = results.ea;\n    // Pose 2D landmarks are with respect to videoWidth and videoHeight\n    const pose2DLandmarks = results.poseLandmarks;\n    // Be careful, hand landmarks may be reversed\n    const leftHandLandmarks = results.rightHandLandmarks;\n    const rightHandLandmarks = results.leftHandLandmarks;\n  \n    // Animate Face\n    if (faceLandmarks) {\n      riggedFace = Kalidokit.Face.solve(faceLandmarks,{\n        runtime:\"mediapipe\",\n        video: myVideoRef.current\n      });\n      rigFace(riggedFace)\n    }\n  \n    // Animate Pose\n    if (pose2DLandmarks && pose3DLandmarks) {\n      riggedPose = Kalidokit.Pose.solve(pose3DLandmarks, pose2DLandmarks, {\n        runtime: \"mediapipe\",\n        video: myVideoRef.current,\n      });\n      if (!riggedPose) return\n      rigRotation(\"Hips\", riggedPose.Hips.rotation, 0.7);\n      rigPosition(\n        \"Hips\",\n        {\n          x: -riggedPose.Hips.position.x, // Reverse direction\n          y: riggedPose.Hips.position.y + 1, // Add a bit of height\n          z: -riggedPose.Hips.position.z // Reverse direction\n        },\n        1,\n        0.07\n      );\n  \n      rigRotation(\"Chest\", riggedPose.Spine, 0.25, .3);\n      rigRotation(\"Spine\", riggedPose.Spine, 0.45, .3);\n  \n      rigRotation(\"RightUpperArm\", riggedPose.RightUpperArm, 1, .3);\n      rigRotation(\"RightLowerArm\", riggedPose.RightLowerArm, 1, .3);\n      rigRotation(\"LeftUpperArm\", riggedPose.LeftUpperArm, 1, .3);\n      rigRotation(\"LeftLowerArm\", riggedPose.LeftLowerArm, 1, .3);\n  \n      rigRotation(\"LeftUpperLeg\", riggedPose.LeftUpperLeg, 1, .3);\n      rigRotation(\"LeftLowerLeg\", riggedPose.LeftLowerLeg, 1, .3);\n      rigRotation(\"RightUpperLeg\", riggedPose.RightUpperLeg, 1, .3);\n      rigRotation(\"RightLowerLeg\", riggedPose.RightLowerLeg, 1, .3);\n    }\n  \n    // Animate Hands\n    if (leftHandLandmarks) {\n      riggedLeftHand = Kalidokit.Hand.solve(leftHandLandmarks, \"Left\");\n      if(!riggedLeftHand || !riggedPose) return\n      rigRotation(\"LeftHand\", {\n        // Combine pose rotation Z and hand rotation X Y\n        z: riggedPose.LeftHand.z,\n        y: riggedLeftHand.LeftWrist.y,\n        x: riggedLeftHand.LeftWrist.x\n      });\n      rigRotation(\"LeftRingProximal\", riggedLeftHand.LeftRingProximal);\n      rigRotation(\"LeftRingIntermediate\", riggedLeftHand.LeftRingIntermediate);\n      rigRotation(\"LeftRingDistal\", riggedLeftHand.LeftRingDistal);\n      rigRotation(\"LeftIndexProximal\", riggedLeftHand.LeftIndexProximal);\n      rigRotation(\"LeftIndexIntermediate\", riggedLeftHand.LeftIndexIntermediate);\n      rigRotation(\"LeftIndexDistal\", riggedLeftHand.LeftIndexDistal);\n      rigRotation(\"LeftMiddleProximal\", riggedLeftHand.LeftMiddleProximal);\n      rigRotation(\"LeftMiddleIntermediate\", riggedLeftHand.LeftMiddleIntermediate);\n      rigRotation(\"LeftMiddleDistal\", riggedLeftHand.LeftMiddleDistal);\n      rigRotation(\"LeftThumbProximal\", riggedLeftHand.LeftThumbProximal);\n      rigRotation(\"LeftThumbIntermediate\", riggedLeftHand.LeftThumbIntermediate);\n      rigRotation(\"LeftThumbDistal\", riggedLeftHand.LeftThumbDistal);\n      rigRotation(\"LeftLittleProximal\", riggedLeftHand.LeftLittleProximal);\n      rigRotation(\"LeftLittleIntermediate\", riggedLeftHand.LeftLittleIntermediate);\n      rigRotation(\"LeftLittleDistal\", riggedLeftHand.LeftLittleDistal);\n    }\n    if (rightHandLandmarks) {\n      riggedRightHand = Kalidokit.Hand.solve(rightHandLandmarks, \"Right\");\n      if(!riggedRightHand || !riggedPose) return\n      rigRotation(\"RightHand\", {\n        // Combine Z axis from pose hand and X/Y axis from hand wrist rotation\n        z: riggedPose.RightHand.z,\n        y: riggedRightHand.RightWrist.y,\n        x: riggedRightHand.RightWrist.x\n      });\n      rigRotation(\"RightRingProximal\", riggedRightHand.RightRingProximal);\n      rigRotation(\"RightRingIntermediate\", riggedRightHand.RightRingIntermediate);\n      rigRotation(\"RightRingDistal\", riggedRightHand.RightRingDistal);\n      rigRotation(\"RightIndexProximal\", riggedRightHand.RightIndexProximal);\n      rigRotation(\"RightIndexIntermediate\",riggedRightHand.RightIndexIntermediate);\n      rigRotation(\"RightIndexDistal\", riggedRightHand.RightIndexDistal);\n      rigRotation(\"RightMiddleProximal\", riggedRightHand.RightMiddleProximal);\n      rigRotation(\"RightMiddleIntermediate\", riggedRightHand.RightMiddleIntermediate);\n      rigRotation(\"RightMiddleDistal\", riggedRightHand.RightMiddleDistal);\n      rigRotation(\"RightThumbProximal\", riggedRightHand.RightThumbProximal);\n      rigRotation(\"RightThumbIntermediate\", riggedRightHand.RightThumbIntermediate);\n      rigRotation(\"RightThumbDistal\", riggedRightHand.RightThumbDistal);\n      rigRotation(\"RightLittleProximal\", riggedRightHand.RightLittleProximal);\n      rigRotation(\"RightLittleIntermediate\", riggedRightHand.RightLittleIntermediate);\n      rigRotation(\"RightLittleDistal\", riggedRightHand.RightLittleDistal);\n    }\n  };\n\n  useEffect(() => {\n    // use Mediapipe's webcam utils to send video to holistic every frame\n    // getMedia()\n    (async () => {\n      // @ts-ignore\n      const holistic = await new Holistic({locateFile: (file) => {\n        return `https://cdn.jsdelivr.net/npm/@mediapipe/holistic@0.5.1635989137/${file}`;\n      }});\n      holistic.setOptions({\n        modelComplexity: 1,\n        smoothLandmarks: true,\n        minDetectionConfidence: 0.7,\n        minTrackingConfidence: 0.7,\n        refineFaceLandmarks: true,\n      });\n      holisticRef.current = holistic\n\n      const myCamera = await new Camera(myVideoRef.current!, {\n        onFrame: async () => {\n          // await holistic.send({image: myVideoRef.current!});\n        },\n        width: 640,\n        height: 480\n      }) as ExtendedCamera;\n      await myCamera.start();\n      const stream = myCamera.g\n\n      streamRef.current = stream\n      myVideoRef.current.srcObject = stream\n\n      // const stream = await navigator.mediaDevices.getUserMedia({\n      //   video: true,\n      //   audio: true,\n      // });\n\n      await modelLoad()\n      await threeSetup()\n      holistic.onResults(onResults);\n    })()\n    return (() => {\n    })\n  }, [])\n  const handleRoomIDSubmit = (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault()\n  }\n  return (<>\n    <canvas ref={myCanvasRef}></canvas>\n    <div>kalido video test</div>\n    <button onClick={handleRoomIDSubmit}>rest</button>\n  </>)\n}\nexport default VideoTest;"],"names":["myVideoRef","useRef","document","createElement","myCanvasRef","scene","Scene","currentVrm","oldLookTarget","Euler","streamRef","holisticRef","_useState","useState","_useState2","_slicedToArray","threeSetup","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","renderer","orbitCamera","orbitControls","light","clock","animate","_animate","wrap","_context2","prev","next","_callee","_context","current","send","image","update","getDelta","render","requestAnimationFrame","stop","apply","arguments","WebGLRenderer","canvas","alpha","setPixelRatio","window","devicePixelRatio","PerspectiveCamera","position","set","OrbitControls","domElement","screenSpacePanning","target","DirectionalLight","normalize","add","Clock","modelLoad","_ref2","_callee4","loader","_context4","GLTFLoader","crossOrigin","load","_ref3","_callee3","gltf","_context3","VRMUtils","removeUnnecessaryJoints","VRM","from","then","vrm","rotation","y","Math","PI","_x","progress","console","log","loaded","total","error","rigRotation","name","_currentVrm$current$h","length","undefined","x","z","dampener","lerpAmount","Part","humanoid","getBoneNode","VRMSchema","HumanoidBoneName","euler","quaternion","Quaternion","setFromEuler","slerp","onResults","results","riggedPose","riggedLeftHand","riggedRightHand","faceLandmarks","pose3DLandmarks","ea","pose2DLandmarks","poseLandmarks","leftHandLandmarks","rightHandLandmarks","riggedFace","_Blendshape$getValue","_Blendshape$getValue2","_Blendshape$getValue3","_Blendshape$getValue4","_Blendshape$getValue5","_Blendshape$getValue6","_Blendshape$getValue7","_currentVrm$current$l","_currentVrm$current$l2","head","Blendshape","blendShapeProxy","PresetName","BlendShapePresetName","eye","l","lerp","clamp","getValue","Blink","r","Kalidokit","stabilizeBlink","setValue","I","mouth","shape","A","E","O","U","lookTarget","pupil","copy","lookAt","applyer","rigFace","solve","runtime","video","Hips","_currentVrm$current$h2","vector","Vector3","rigPosition","Spine","RightUpperArm","RightLowerArm","LeftUpperArm","LeftLowerArm","LeftUpperLeg","LeftLowerLeg","RightUpperLeg","RightLowerLeg","LeftHand","LeftWrist","LeftRingProximal","LeftRingIntermediate","LeftRingDistal","LeftIndexProximal","LeftIndexIntermediate","LeftIndexDistal","LeftMiddleProximal","LeftMiddleIntermediate","LeftMiddleDistal","LeftThumbProximal","LeftThumbIntermediate","LeftThumbDistal","LeftLittleProximal","LeftLittleIntermediate","LeftLittleDistal","RightHand","RightWrist","RightRingProximal","RightRingIntermediate","RightRingDistal","RightIndexProximal","RightIndexIntermediate","RightIndexDistal","RightMiddleProximal","RightMiddleIntermediate","RightMiddleDistal","RightThumbProximal","RightThumbIntermediate","RightThumbDistal","RightLittleProximal","RightLittleIntermediate","RightLittleDistal","useEffect","_callee6","holistic","myCamera","stream","_context6","Holistic","locateFile","file","concat","sent","setOptions","modelComplexity","smoothLandmarks","minDetectionConfidence","minTrackingConfidence","refineFaceLandmarks","Camera","onFrame","_onFrame","_callee5","_context5","width","height","start","g","srcObject","_jsxs","_Fragment","children","_jsx","ref","onClick","e","preventDefault"],"sourceRoot":""}