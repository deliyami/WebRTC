{"version":3,"file":"static/js/607.b4b05e95.chunk.js","mappings":"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","sources":["components/canvas.tsx"],"sourcesContent":["import { VRM, VRMUtils } from '@pixiv/three-vrm';\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef } from 'react';\nimport { Clock, DirectionalLight, PerspectiveCamera, Scene, WebGLRenderer } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\ntype CanvasProps = {\n  canvasRef: React.RefObject<HTMLCanvasElement>,\n  vrm: VRM | undefined,\n  setVrm: (v: VRM) => void\n  setSuccess: React.Dispatch<React.SetStateAction<Boolean>>,\n}\nexport type CanvasRef = {\n  animate: () => void\n}\n\nconst Canvas = forwardRef<CanvasRef, CanvasProps>(({ canvasRef, vrm, setVrm, setSuccess }, ref) => {\n  useImperativeHandle(ref, () => ({\n    animate\n  }))\n  // const canvasRef = useRef<HTMLCanvasElement>(null)\n  const sceneRef = useRef<Scene>(new Scene())\n  const rendererRef = useRef<WebGLRenderer>()\n  const orbitCameraRef = useRef<PerspectiveCamera>()\n  const clockRef = useRef<Clock>()\n\n  const getModel = async () => {\n    const loader = new GLTFLoader();\n    loader.crossOrigin = \"anonymous\";\n    // Import model from URL, add your own model here\n    await loader.load(\n      \"https://cdn.glitch.com/29e07830-2317-4b15-a044-135e73c7f840%2FAshtra.vrm?v=1630342336981\",\n      async gltf => {\n        await VRMUtils.removeUnnecessaryJoints(gltf.scene);\n        await VRM.from(gltf).then(v => {\n          console.log('object');\n          sceneRef.current.add(v.scene);\n          setVrm(v)\n        });\n      },\n\n      progress =>\n        console.log(\n          \"Loading model...\",\n          100.0 * (progress.loaded / progress.total),\n          \"%\"\n        ),\n\n      error => console.error(error)\n    );\n  }\n  const setThree = () => {\n    rendererRef.current = new WebGLRenderer({\n      canvas: canvasRef.current!,\n      alpha:true\n    });\n    rendererRef.current.setPixelRatio(window.devicePixelRatio);\n\n    // camera\n    orbitCameraRef.current = new PerspectiveCamera(35, 300 / 225, 0.1, 1000);\n    orbitCameraRef.current.position.set(-0.1, 1.4, 0.7);\n\n    // controls\n    const orbitControls = new OrbitControls(orbitCameraRef.current, rendererRef.current.domElement);\n    orbitControls.screenSpacePanning = true;\n    orbitControls.target.set(-0.1, 1.4, 0.0);\n    orbitControls.update();\n\n    // light\n    const light = new DirectionalLight(0xffffff);\n    light.position.set(1.0, 1.0, 1.0).normalize();\n    sceneRef.current.add(light);\n\n    // async function animate() {\n    //   if (holisticRef.current && videoRef.current)\n    //   await holisticRef.current.send({image: videoRef.current});\n    // }\n    clockRef.current = new Clock()\n  }\n  // Loop Method, this is used Parent\n  const animate = () => {\n    if (!(clockRef.current && rendererRef.current && orbitCameraRef.current)) return\n    if (vrm) {\n      // Update model to render physics\n      vrm.update(clockRef.current.getDelta());\n    }\n    rendererRef.current.render(sceneRef.current, orbitCameraRef.current);\n    // requestAnimationFrame(animate);\n  }\n\n  \n  useEffect (() => {\n    (async() => {\n      await getModel()\n      setThree()\n      setSuccess(true)\n    })()\n  }, [])\n  return (<>\n    <canvas ref={canvasRef}></canvas>\n  </>)\n})\nexport default Canvas;"],"names":["Canvas","forwardRef","_ref","ref","canvasRef","vrm","setVrm","setSuccess","useImperativeHandle","animate","sceneRef","useRef","Scene","rendererRef","orbitCameraRef","clockRef","getModel","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","loader","wrap","_context2","prev","next","GLTFLoader","crossOrigin","load","_ref3","_callee","gltf","_context","VRMUtils","removeUnnecessaryJoints","scene","VRM","from","then","v","console","log","current","add","stop","_x","apply","arguments","progress","loaded","total","error","setThree","WebGLRenderer","canvas","alpha","setPixelRatio","window","devicePixelRatio","PerspectiveCamera","position","set","orbitControls","OrbitControls","domElement","screenSpacePanning","target","update","light","DirectionalLight","normalize","Clock","getDelta","render","useEffect","_callee3","_context3","_jsx","_Fragment","children"],"sourceRoot":""}